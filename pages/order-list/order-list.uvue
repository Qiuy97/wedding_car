<template>
  <!-- 订单列表页 - 完全匹配HTML设计 -->
  <view class="bg-white min-h-screen relative overflow-hidden">
    <!-- 状态标签栏 - 完全匹配HTML设计 -->
    <view class="bg-white border-b border-gray-100 sticky top-0 z-10">
      <scroll-view class="flex overflow-x-auto scrollbar-hide" scroll-x>
        <view class="flex">
          <button 
            v-for="tab in tabs" 
            :key="tab.key" 
            class="whitespace-nowrap px-4 py-3 text-sm"
            :class="activeTab === tab.key ? 'text-primary border-b-2 border-primary font-medium' : 'text-neutral-light'"
            @click="switchTab(tab.key)"
          >
            {{ tab.name }}
          </button>
        </view>
      </scroll-view>
    </view>

    <!-- 订单列表 - 完全匹配HTML设计 -->
    <scroll-view class="pb-16" scroll-y @scrolltolower="loadMore">
      <view class="p-4 space-y-3">
        <!-- 订单项 -->
        <view 
          v-for="order in filteredOrders" 
          :key="order.id" 
          class="bg-white rounded-lg shadow p-4"
          @click="goToOrderDetail(order)"
        >
          <!-- 订单头部 -->
          <view class="flex justify-between items-center mb-3">
            <text class="text-neutral-light text-sm">订单号：{{ order.orderNo }}</text>
            <view class="px-2 py-1 rounded-full text-xs" :class="getStatusClass(order.status)">
              {{ getStatusText(order.status) }}
            </view>
          </view>

          <!-- 订单内容 -->
          <view class="flex items-center mb-3">
            <image :src="order.car.image" :alt="order.car.name" class="w-16 h-16 rounded-lg object-cover" mode="aspectFill"></image>
            <view class="ml-3 flex-1">
              <text class="font-medium">{{ order.car.name }}</text>
              <view class="text-neutral-light text-sm mt-1">
                <text class="block">{{ order.serviceDate }} {{ order.serviceTime }}</text>
                <text class="block">{{ order.pickupAddress }}</text>
              </view>
            </view>
            <view class="text-right">
              <text class="text-primary font-bold text-lg">¥{{ order.totalAmount }}</text>
            </view>
          </view>

          <!-- 操作按钮 -->
          <view class="flex justify-end space-x-2" v-if="order.actions && order.actions.length">
            <button 
              v-for="action in order.actions" 
              :key="action.type"
              class="px-3 py-1.5 rounded-lg text-sm"
              :class="action.type === 'primary' ? 'bg-primary text-white' : 'border border-primary text-primary'"
              @click.stop="handleAction(action, order)"
            >
              {{ action.text }}
            </button>
          </view>
        </view>

        <!-- 空状态 -->
        <view v-if="filteredOrders.length === 0 && !loading" class="text-center py-20">
          <text class="fa fa-file-text-o text-4xl text-neutral-light block mb-4"></text>
          <text class="text-neutral-light">暂无{{ activeTabName }}订单</text>
        </view>

        <!-- 加载更多 -->
        <view v-if="hasMore && filteredOrders.length > 0" class="text-center py-4">
          <button class="text-primary" @click="loadMore">
            <text v-if="loading">加载中...</text>
            <text v-else>加载更多</text>
          </button>
        </view>
      </view>
    </scroll-view>
  </view>
</template>

<script>
export default {
  data() {
    return {
      activeTab: 'all',
      loading: false,
      hasMore: true,
      page: 1,
      // 标签配置 - 完全匹配HTML设计
      tabs: [
        { key: 'all', name: '全部' },
        { key: 'pending', name: '待确认' },
        { key: 'confirmed', name: '已确认' },
        { key: 'ongoing', name: '进行中' },
        { key: 'completed', name: '已完成' }
      ],
      // 订单数据 - 完全匹配HTML设计
      orders: [
        {
          id: 'WC202501151030',
          orderNo: 'WC202501151030',
          status: 'confirmed',
          serviceDate: '2025-02-14',
          serviceTime: '09:00',
          pickupAddress: '北京市朝阳区三里屯',
          totalAmount: 3300,
          car: {
            name: '奔驰S级',
            image: 'https://picsum.photos/300/300?random=100'
          },
          actions: [
            { type: 'secondary', text: '联系车主', action: 'contact' },
            { type: 'secondary', text: '取消订单', action: 'cancel' }
          ]
        },
        {
          id: 'WC202501101420',
          orderNo: 'WC202501101420',
          status: 'completed',
          serviceDate: '2025-01-20',
          serviceTime: '14:00',
          pickupAddress: '北京市海淀区中关村',
          totalAmount: 2800,
          car: {
            name: '宝马7系',
            image: 'https://picsum.photos/300/300?random=101'
          },
          actions: [
            { type: 'primary', text: '评价订单', action: 'rate' }
          ]
        },
        {
          id: 'WC202501051000',
          orderNo: 'WC202501051000',
          status: 'pending',
          serviceDate: '2025-02-01',
          serviceTime: '10:00',
          pickupAddress: '北京市西城区金融街',
          totalAmount: 4200,
          car: {
            name: '劳斯莱斯幻影',
            image: 'https://picsum.photos/300/300?random=102'
          },
          actions: [
            { type: 'secondary', text: '联系车主', action: 'contact' },
            { type: 'secondary', text: '取消订单', action: 'cancel' }
          ]
        },
        {
          id: 'WC202412281600',
          orderNo: 'WC202412281600',
          status: 'ongoing',
          serviceDate: '2024-12-28',
          serviceTime: '16:00',
          pickupAddress: '北京市东城区王府井',
          totalAmount: 3500,
          car: {
            name: '奥迪A8',
            image: 'https://picsum.photos/300/300?random=103'
          },
          actions: [
            { type: 'secondary', text: '联系车主', action: 'contact' }
          ]
        }
      ]
    }
  },
  computed: {
    // 当前选中标签名称
    activeTabName() {
      const tab = this.tabs.find(t => t.key === this.activeTab);
      return tab ? tab.name : '';
    },
    
    // 过滤后的订单列表
    filteredOrders() {
      if (this.activeTab === 'all') {
        return this.orders;
      }
      return this.orders.filter(order => order.status === this.activeTab);
    }
  },
  onLoad() {
    this.loadOrderList();
  },
  onShow() {
    // 页面显示时刷新数据
    this.refreshOrderList();
  },
  methods: {
    // 切换标签
    switchTab(tab) {
      this.activeTab = tab;
    },
    
    // 加载订单列表
    async loadOrderList(refresh = false) {
      if (this.loading) return;
      
      this.loading = true;
      
      try {
        // 模拟API调用延迟
        await new Promise(resolve => setTimeout(resolve, 800));
        
        // 在实际应用中，这里会调用API获取订单列表
        console.log('加载订单列表，标签:', this.activeTab, '页码:', this.page);
        
        this.hasMore = false; // 模拟数据已全部加载
        
      } catch (error) {
        console.error('加载订单列表失败:', error);
        uni.showToast({
          title: '加载失败',
          icon: 'none'
        });
      }
      
      this.loading = false;
    },
    
    // 刷新订单列表
    refreshOrderList() {
      this.page = 1;
      this.loadOrderList(true);
    },
    
    // 加载更多
    loadMore() {
      if (this.hasMore && !this.loading) {
        this.page++;
        this.loadOrderList();
      }
    },
    
    // 获取状态样式类
    getStatusClass(status) {
      const classMap = {
        'pending': 'bg-secondary-10 text-secondary',     // 待确认 - 金色
        'confirmed': 'bg-primary-10 text-primary',       // 已确认 - 主色
        'ongoing': 'bg-blue-100 text-blue-600',          // 进行中 - 蓝色
        'completed': 'bg-green-100 text-green-600',      // 已完成 - 绿色
        'cancelled': 'bg-red-100 text-red-600'           // 已取消 - 红色
      };
      return classMap[status] || 'bg-gray-100 text-gray-600';
    },
    
    // 获取状态文本
    getStatusText(status) {
      const statusMap = {
        'pending': '待确认',
        'confirmed': '已确认',
        'ongoing': '进行中',
        'completed': '已完成',
        'cancelled': '已取消'
      };
      return statusMap[status] || '未知状态';
    },
    
    // 跳转到订单详情
    goToOrderDetail(order) {
      uni.navigateTo({
        url: `/pages/order-detail/order-detail?id=${order.id}`
      });
    },
    
    // 处理操作按钮点击
    handleAction(action, order) {
      switch (action.action) {
        case 'contact':
          this.contactOwner(order);
          break;
        case 'cancel':
          this.cancelOrder(order);
          break;
        case 'rate':
          this.rateOrder(order);
          break;
        default:
          console.log('未知操作:', action.action);
      }
    },
    
    // 联系车主
    contactOwner(order) {
      uni.showModal({
        title: '联系车主',
        content: '是否拨打车主电话？',
        success: (res) => {
          if (res.confirm) {
            uni.makePhoneCall({
              phoneNumber: '13800138000'
            });
          }
        }
      });
    },
    
    // 取消订单
    cancelOrder(order) {
      uni.showModal({
        title: '确认取消',
        content: '确定要取消这个订单吗？取消后费用将原路退回。',
        success: (res) => {
          if (res.confirm) {
            uni.showLoading({ title: '取消中...' });
            
            // 模拟API调用
            setTimeout(() => {
              uni.hideLoading();
              
              // 更新订单状态
              const orderIndex = this.orders.findIndex(o => o.id === order.id);
              if (orderIndex !== -1) {
                this.orders[orderIndex].status = 'cancelled';
                this.orders[orderIndex].actions = [];
              }
              
              uni.showToast({
                title: '订单已取消',
                icon: 'success'
              });
            }, 1500);
          }
        }
      });
    },
    
    // 评价订单
    rateOrder(order) {
      uni.showToast({
        title: '评价功能开发中',
        icon: 'none'
      });
    }
  }
}
</script>

<style lang="scss" scoped>
/* 页面特定样式 - 使用全局Tailwind CSS类，只定义特殊需求 */

/* 确保图标字体正确显示 */
.fa {
  font-family: 'FontAwesome' !important;
}

/* 透明度背景颜色 */
.bg-secondary-10 {
  background-color: rgba(212, 175, 55, 0.1);
}

.bg-primary-10 {
  background-color: rgba(183, 110, 121, 0.1);
}

.text-secondary {
  color: #D4AF37;
}

/* 标签栏底部边框 */
.border-b-2 {
  border-bottom-width: 2px;
}

.border-primary {
  border-color: #B76E79;
}

/* 状态栏适配 */
page {
  background-color: #F9F9F9;
}
</style>
